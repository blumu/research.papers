This file was created with JabRef 2.1 beta.
Encoding: Cp1252

@ARTICLE{abel-structuralrecanalysis,
  author = {Andreas Abel and Thorsten Altenkirch},
  title = {A predicative analysis of structural recursion},
  journal = {J. Funct. Program.},
  year = {2002},
  volume = {12},
  pages = {1--41},
  number = {1},
  address = {New York, NY, USA},
  doi = {http://dx.doi.org/10.1017/S0956796801004191},
  issn = {0956-7968},
  owner = {William},
  publisher = {Cambridge University Press},
  timestamp = {2006.05.12}
}

@MASTERSTHESIS{blum-mscthesis,
  author = {William Blum},
  title = {Termination Analysis of $\lambda$-calculus and a subset of core ML},
  school = {University of Oxford},
  year = {2004},
  address = {http://william.famille-blum.org/},
  month = {september},
  abstract = {Lee, Jones and Ben-Amram introduced ``size-change termination'', a
	decidable property strictly stronger than termination. They invented
	a method called the ``size-change principle'' to analyze it. I propose
	an extension of the size-change principle to a subset of ML featuring
	ground type values, higher-order type values and recursively defined
	functions. Compared to other works, this is the first time that
	the size-change principle is applied to a higher-order functional
	language.
	
	 The language handles natively if-then-else and let rec structures.
	The resulting algorithm produces the expected result for higher-order
	values but can also analyze the size of ground type values. This
	enhances the scope of the termination analyzer to some recursively
	defined function operating on numbers.},
  keywords = {size-change termination, lambda calculus, core ml},
  owner = {William},
  timestamp = {2006.05.12}
}

@ARTICLE{interpreter-spec-jones,
  author = {Jones, N.D.},
  title = {Transformation by interpreter specialisation},
  journal = {Science of Computer Programming},
  year = {2004},
  volume = {52},
  pages = {307--339},
  owner = {William},
  puf = {Artikel optaget i tidsskrift},
  semno = {D-500},
  summary = {A program may be transformed by specialising an interpreter for the
	language in which it is written. Efficiency of the transformed program
	is determined by the efficiency of the interpreter's dynamic operations;
	the efficiency of its static operations is irrelevant, since all
	will be ``specialised away''. This approach is {\em automatic} (as
	automatic as the specialiser is); {\em general}, in that it applies
	to all of the interpreter's input programs; and {\em flexible},
	in that a wide range of program transformations are achievable since
	the transformed program inherits the style of the interpreter. The
	chief practical challenge is understanding cause and effect: How
	should one write the interpreter so that specialisation produces
	efficient transformed programs? The core of this paper is a series
	of examples, both positive and negative, showing how the way the
	interpreter is written can influence the removal of interpretational
	overhead, and thus the efficiency and size of the target programs
	obtained by specialisation.},
  timestamp = {2006.05.12}
}

@UNPUBLISHED{jones04,
  author = {N.D. Jones and N. Bohr.},
  title = {Termination of the untyped lambda calculus},
  year = {2004},
  owner = {William},
  timestamp = {2006.05.12}
}

@ARTICLE{compiler-correct-jones-et-al,
  author = {Lacey, D. and Jones, N.D. and Van Wyk, E. and Frederiksen, C.C.},
  title = {Compiler optimization correctness by temporal logic},
  journal = {Higher Order and Symbolic Computation},
  year = {2004},
  volume = {17},
  pages = {173--206},
  number = {3},
  owner = {William},
  puf = {Artikel optaget i tidsskrift},
  semno = {D-499},
  summary = {Rewrite rules with side conditions of form: $I \Rightarrow I' {\rm
	if} \phi$ can elegantly express many classical compiler optimizations
	for imperative programming languages. In this paper, programs are
	written in an intermediate language and transformation-enabling
	side conditions are specified in a temporal logic suitable for describing
	program data flow. The purpose of this paper is to show how such
	transformations may be proven correct. Our methodology is illustrated
	by three familiar optimizations: dead code elimination, constant
	folding, and code motion. A transformation is correct if whenever
	it can be applied to a program, the original and transformed programs
	are semantically equivalent, i.e., they compute the same input-output
	function. The proofs of semantic equivalence inductively show that
	a transformation-specific bisimulation relation holds between the
	original and transformed program computations.},
  timestamp = {2006.05.12}
}

@ARTICLE{jones01,
  author = {C.S. Lee and N.D. Jones and A. M. Ben-Amram},
  title = {The size-change principle for program termination},
  year = {2001},
  owner = {William},
  publisher = {Proceedings ACM Symposium on Principles of Programming Languages},
  timestamp = {2006.05.12}
}

@INPROCEEDINGS{podelski-transpredabsrt,
  author = {Andreas Podelski and Andrey Rybalchenko},
  title = {Transition predicate abstraction and fair termination},
  booktitle = {POPL '05: Proceedings of the 32nd ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {2005},
  pages = {132--144},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  doi = {http://doi.acm.org/10.1145/1040305.1040317},
  isbn = {1-58113-830-X},
  location = {Long Beach, California, USA},
  owner = {William},
  timestamp = {2006.05.12}
}

@INPROCEEDINGS{podelski-transinvar,
  author = {Andreas Podelski and Andrey Rybalchenko},
  title = {Transition Invariants},
  booktitle = {LICS '04: Proceedings of the 19th Annual IEEE Symposium on Logic
	in Computer Science (LICS'04)},
  year = {2004},
  pages = {32--41},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  doi = {http://dx.doi.org/10.1109/LICS.2004.50},
  isbn = {0-7695-2192-4},
  owner = {William},
  timestamp = {2006.05.12}
}

@UNPUBLISHED{serenistypesct05,
  author = {Damien Sereni},
  title = {Simply typed $\lambda$-calculus and SCT},
  year = {2005},
  owner = {William},
  timestamp = {2006.05.12}
}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_keywords:}

@comment{jabref-meta: selector_publisher:}

