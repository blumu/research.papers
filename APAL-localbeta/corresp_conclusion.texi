We have given a new presentation of game semantics based on the theory of traversals. This presentation is concrete in the sense that the traversal denotation carries syntactic information about the term. We established the connection with the Hyland-Ong game semantics by means of a Correspondence Theorem: The set of traversals of a term is isomorphic to the revealed game denotation of the term.

One advantage of the traversal theory lies in its ability to compute beta-reduction locally without having to perform term substitution.
As observed by Danos et~al.\ \cite{Danos1996}, ``the interaction processes at work in game semantics are implementations of \emph{linear head reduction}''.
In that regards, the traversals theory can be viewed as a rule-based implementation of the \emph{head linear reduction strategy} \cite{danos-head}. Although the idea of evaluating a term using this strategy is not new, our presentation has several advantages and novelties. Firstly, the Correspondence theorem establishes a clear correspondence with game semantics, namely that traversals gives you a way to compute precisely the revealed game denotation of a term. To our knowledge, although the notion of revealed game semantics was mentioned in previous works \cite{willgreenlandthesis}, it was never formally defined.
Secondly, our presentation highlights more clearly the algorithmic aspect of game semantics. The rule-based definition of traversals lends itself well to automaton characterization. An example is the characterization of higher-order recursion schemes by \emph{collapsible higher-order pushdown automata} \cite{hmos-lics08}.
\smallskip

Another advantage of the traversal theory is its efficiency for effectively computing the game-semantic denotation of a term.
The traditional approach is to proceed bottom-up by appealing to compositionality.
Although the compositional nature of game semantics is very attractive from a theoretical point of view, in practice it is not efficient to compute a denotation in that way. Indeed, for every subterm one has to compute all the possible ways to interact with the environment for that subterm. But this denotation is then immediately composed with another subterm, which determines part of the environment's behaviour, thus it was wasteful in the first place to consider all the possible behaviours of the environment for the first term.

The traversal theory follows a top-down approach which means that we only consider possible behaviour of the outermost environment.
Moreover contrary to the compositional method, there is no need to implement any composition mechanism: the set of traversals is just obtained by following the traversal rules; the hiding of internal nodes is postponed until the end.

The lazy nature of the traversal evaluation provides a further source of efficiency: the beta-redexes are computed ``on-demand'' instead of performing a global substitution.
\smallskip

Last but not least, we believe that the syntactic correspondence between game semantics and its syntax is of pedagogical interest. Game semantics is often found hard to understand due to some obscure technical definitions.
A concrete presentation such as the one given by the traversal theory, allows one to explain game-semantic concepts (such as P-view, innocence, visibility) from a programmer point of view. I have implemented a prototype tool using the F\# programming language, which among other things, illustrates the theory of traversals \cite{Blum2008}. The tool lets the user ``play'' the game induced by a simply-typed term (or a higher-order grammar) just by choosing nodes from the computation tree. As the game unfolds the corresponding traversal is shown. A calculator mode allows the user to perform various operations on justified sequences. (All the examples from this chapter were generated using this tool.)



\subsection*{Further correspondences}
The traversal theory that we have presented here captures the lambda calculus fragment of the game model of call-by-name programming languages such as PCF and Idealized Algol. A natural way to extend this work would be to define the appropriate notion of traversal
corresponding to the call-by-value games \cite{plotkin-75, abramsky98callbyvalue}.

\subsection*{Applications}
The theory of traversal has applications in several domains of research:

\subsubsection*{Verification}
The theory of traversal was originally introduced by Ong to study the decidability of MSO theories of infinite trees generated by higher-order recursion schemes. This result was recently used by Kobayashi to develop a novel framework for verification of temporal properties of higher-order functional programs \cite{Kobayashi}.

Another promising application of the traversal theory concerns the study
of reachability problems. In its most general form, the reachability problem for programming languages can informally be stated as: \emph{Given a term $M$ and coloured subterm $N$, is there a context $C[-]$ such that evaluating $C[M]$ involves the evaluation of $N$?}. In an ongoing research project, Luke Ong and Nikos Tzevelekos make use of the traversal theory to study several variations of the reachability problem for finitary \pcf\ \cite{ongnik_pcfreachability}.

\subsubsection*{Automata theory} The traversal theory has led to an equi-expressivity result between a certain type of automaton device called \emph{collapsible pushdown automaton} (CPDA) and higher-order recursion schemes (HORS) \cite{hmos-lics08}. One direction of this proof relies on the traversal theory: for a given HORS, a CPDA is constructed that computes precisely the set of traversals over the computation tree of the HORS.

A crucial point in this encoding is that structures generated by recursion schemes are of ground type. Because such structures do not interact with the environment, their game-semantic denotation is relatively simple. In particular, the O-view of the traversal does not play any role in the traversal rules and therefore the automaton does not need to calculate or remember it. A natural extension would be a similar automata-characterization for \emph{higher-order} structures such as simply-typed terms.


\subsubsection*{Pattern matching}

Higher-order matching is the following problem: Given an equation $M=N$ where $M$ is an open simply-typed term and $N$ is a closed simply-typed term, is there a solution substitution $\theta$ such that $M \theta$ and $N$ have the same $\beta\eta$-normal form? Huet conjectured in 1976 that this problem is decidable \cite{huet76}. It was proved only recently by Colin Stirling that it is indeed the case \cite{DBLP:conf/icalp/Stirling06}.

Stirling's argument is based on a game-theoretic argument, namely the concept of tree-checking games.
As pointed out by Luke Ong, Stirling's games are closely related to the innocent game semantics framework provided by the theory of traversals. The concept of traversals is implicitly present in Stirling's proof (though the notion of justification pointers is replaced by ``iteratively defined look-up tables'').


\subsubsection*{Analyzing syntactic constraints}

The connection between syntax and semantics provided by the traversal theory enables us to analyze the effect of a given syntactic constraint on the game model. The next chapter is an example of such an application: By making simple observations about the computation tree of safe terms, the Correspondence Theorem allows us to show that their strategy denotations are of a particular kind: Their plays satisfy a certain property called \emph{incremental justification}.
