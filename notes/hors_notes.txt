What are the infinite words languages generated by HO recursion
scheme?

At order 0, do we get the omega-regular languages? (i.e. languages of
infinite words  recognized by Buchi automata)

At order 1, what do we get? Context-free languages of infinite words? Is
there such a thing?


******************************

**** Urzycyn language U

U is not context-free. The standard pumping lemma for context-free
language (Bar-Hillel lemma) cannot be used to prove it. Instead
one must Ogden's lemma, a a stronger version of the pumping lemma:

Let n be a number > 0.

Take w = [  [^{n+1}  ]^n  ]  [  *^{n+3}.
                     ---

where the underlined ] denotes the n distinguished position of the Ogden Lemma.

Then w admits no decomposition that would allow to pump two (or even
more) subwords at the same time. Hence by Ogden Lemma, U is not
context free.

It is not even possible to decompose w so that three or more
subwords can be pumped at the same time!

This suggests the following conjecture:

**** Conjecture: Ogden pumping lemma for n-PDA
Let L be a language recognized by an order-n PDA A.
Then there is a number n>0 such that for all word w with |w|>0
and all marking of at least n distinguished positions in w,
there is a decomposition w = u p0  u2 p1  ...   un pn u{n+1} such that
- the word p0 p1 ... pn contains at least one marked position
- the word p0 u2 p1  ...  un pn contains at most n marked position
- for all i>=0, u p0^i u2 p1^i  ...   un pn^i u{n+1} is in L.




********** Conjecture
The language L defined as follows is intrinsically unsafe (for any order).

\Sigma = \{ a, b, c \}

L = \{ w *_1^{(|w|_b - |w|_a)} *_2^{(|w|_c - |w|_a)} \ | \
   w \in \Sigma^* \zand |w|_b \geq |w|_a \zand |w|_c \geq |w|_a \}




Lemma Let A be a n-PDA then there is a n+1-PDA recognizing
the reverse of L(A).

Proof: just replace the production of terminals by a push_1
of a corresponding element on the stack followed by a push_{n+1}.
When the end of string symbol is emitted, the reversed string can be
retrieved using the following algorithm:

    while stack is not empty do
       emit top1(s)
       pop_{n+1}
    done
EOP





******************************

Hague, Murawsky, Ong and Serre proposed an algorithm that transforms a
given order-n recursive scheme G to an order-n collapsible pushdown
 automaton (CPDA) A_G that computes the value tree of G (i.e. the tree
 generated by G); precisely, A_G computes exactly the traversals over the
 computation tree of G. (The paper is at
 http://users.comlab.ox.ac.uk/luke.ong/publications/stoc07-long.pdf,>
the relevant part is section 5).

We prove that if G is safe, then A_G is a pushdown automaton
 (of order n). This gives a new proof of the fact that order-n pushdown automata compute
 trees generated by order-n safe recursion schemes, independent of the
 original KNU02 approach. (There is a similar conjecture/result in the
 other direction.)


Proof idea:
In fact for incrementally-bound computation trees,
the n-CPDA that computes the traversals is such that only links created with the push_1
operation will ever be used by a collapse operation later on.
Links that are created during the duplication of a stack by the
operations push_j (for j>=2) can all be ignored. Hence the
collapse operation can safely be simulated with the operation
pop_{n-ord(u)+1} where u is the top_1 lambda-node.


******************************


For a grammar G of order 2, the eta-long normal form of G introduces variables
of order 0 only.

Proof: First necessarily, the variables introduced are of order 1 at most
(otherwise the eta-expanded grammar would not be of order 2).

Suppose a subterm $M$ is eta-expanded to $\lambda u . M u$ where $u$ is a variable
of order $1$. Then this implies that $M$ is of order $2$. Consequently $M$ is a non-terminal!
Indeed any variable or an applicative term is of order $1$ at most in an order $2$ grammar.

However non-terminals of order $2$ cannot occur at operand position, otherwise this would imply that
the grammar is of order $3$. Hence $M$ is not eta-expanded when computing the eta-long normal form, which contradicts the hypothesis.


******************************


2-DPDA equivalence problem:

An approach to prove undecidability of equivalence of order
$2$-DPDA could consist in proving that the set of traversals of a
closed Safe \pcf\ term of ground type with redexes of order $n$ at
most can be encoded into an $n$-DPDA by adapting the construction of
\cite{KNU02}.
