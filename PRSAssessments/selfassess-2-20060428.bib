@inproceedings{KNU02,
    author={T.~Knapik and D.~Niwi{\'n}ski and P.~Urzyczyn},
    title={Higher-order pushdown trees are easy},
    booktitle={FOSSACS'02},
    publisher={Springer},
    note={LNCS Vol.~2303},
    pages={205-222},
    year=2002,
}


@INPROCEEDINGS{abramsky:game-semantics,
  author = {Samson Abramsky and Guy McCusker},
  title = {Game Semantics},
  booktitle = {Proceedings of Marktorberdorf '97 Summerschool},
  year = {1997},
  note = {Lecture notes},
  library = {SCS-8},
  url = "citeseer.ist.psu.edu/abramsky99game.html"
}

@UNPUBLISHED{OngLics2006,
  AUTHOR =       {C.-H. L. Ong},
  TITLE =        {On model-checking trees generating by higher-order recursion schemes},
  NOTE =         {Preprint. To appear in Proceedings of LICS 2006.},
  year =          {2006}
}


@TECHREPORT{safety-mirlong2004,
  AUTHOR =       {K. Aehligand and J.H. de Miranda and C.-H. L. Ong},
  TITLE =        {Safety is not a restriction at Level 2 for string languges},
  INSTITUTION =  {University of Oxford},
  YEAR =         {2004}
}

@article{jones01,
  author    = {C.S. Lee and N.D. Jones and A. M. Ben-Amram},
  title     = {The size-change principle for program termination},
    publisher = {Proceedings ACM Symposium on Principles of Programming Languages},
  year      = 2001,
}

@unpublished{jones04,
  author    = {N.D. Jones and N. Bohr.},
  title     = {Termination of the untyped lambda calculus},
  year      = 2004,
}





@InProceedings{hammer:truly,
  author =  {Moritz Hammer and Alexander Knapp and Stephan Merz},
  title =  {Truly On-The-Fly {LTL} Model Checking},
  booktitle =  {11th Intl. Conf. Tools and Algorithms for the Construction and Analysis of Systems (TACAS 2005)},
  year = 2005,
  editor = {Nicolas Halbwachs and Lenore Zuck},
  series = {Lecture Notes in Computer Science},
  address = {Edinburgh, Scotland},
  month = apr,
  publisher = {Springer-Verlag},
  pages =  {191--205}
}


}

@inproceedings{DBLP:conf/cav/McMillan03,
  author    = {Kenneth L. McMillan},
  title     = {Interpolation and SAT-Based Model Checking.},
  booktitle = {CAV},
  year      = {2003},
  pages     = {1-13},
  ee        = {http://springerlink.metapress.com/openurl.asp?genre=article{\&}issn=0302-9743{\&}volume=2725{\&}spage=1},
  crossref  = {DBLP:conf/cav/2003},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/cav/2003,
  editor    = {Warren A. Hunt Jr. and
               Fabio Somenzi},
  title     = {Computer Aided Verification, 15th International Conference, CAV
               2003, Boulder, CO, USA, July 8-12, 2003, Proceedings},
  booktitle = {CAV},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {2725},
  year      = {2003},
  isbn      = {3-540-40524-0},
  bibsource = {DBLP, http://dblp.uni-trier.de}
  }

@article{ckos2005,
  AUTHOR    = { Clarke, Edmund
                and Kroening, Daniel
                and Ouaknine, Joel
                and Strichman, Ofer },
  TITLE     = { Computational Challenges in Bounded Model Checking },
  YEAR      = { 2005 },
  PUBLISHER = { Springer Verlag },
  PAGES     = { 174--183  },
  JOURNAL   = { Software Tools for Technology Transfer (STTT) },
  VOLUME    = { 7 },
  MONTH     = { April },
  NUMBER    = { 2 },
}

@article{ong01,
  author    = {Luke Ong},
  title     = {Algorithmic game semantics: a tutorial introduction. },
  publisher = {Proceedings of 2001 Marktoberdorf International Summer School, 2002.},
  year      = 2001,
}


@article{ong00,
  author    = {J. M. E. Hyland and C.-H. L. Ong. },
  title     = {On Full Abstraction for PCF. },
  publisher = {Information and Computation, Volume 163, pp. 285-408, December 2000. },
  year      = 2000,
}


@misc{ocaml,
  author    = {INRIA},
  title     = {Objective Caml Programming language },
  note = { \url{http://caml.inria.fr/}},
  year = 2003,
}




@misc{wikipedia,
  author    = {Wikipedia},
  title     = {Wikipedia, the free encyclopedia.},
  note = { \url{http://en.wikipedia.org/}},
  year = 2004,
}


@UNPUBLISHED{serenistypesct05,
  AUTHOR =       {Damien Sereni},
  TITLE =        {Simply typed $\lambda$-calculus and SCT},
  NOTE =         {},
  year =         {2005}
}



@Article{ compiler-correct-jones-et-al,
    AUTHOR     = {Lacey, D. and Jones, N.D. and Van Wyk, E. and
Frederiksen, C.C.},
    YEAR       = {2004},
    TITLE      = {Compiler optimization correctness by temporal logic},
    JOURNAL    = {Higher Order and Symbolic Computation},
    volume     = {17},
    number     = {3},
    pages      = {173--206},
    summary    = {Rewrite rules with side conditions of form:
$I \Rightarrow I' {\rm if} \phi$
can elegantly express many classical compiler optimizations for
imperative programming languages.  In this paper, programs are written
in an intermediate language and transformation-enabling side
conditions are specified in a temporal logic suitable for describing
program data flow.
The purpose of this paper is to show how such transformations may be
proven correct. Our methodology is illustrated by three familiar
optimizations: dead code elimination, constant folding, and code
motion.  A transformation is correct if whenever it can be applied to
a program, the original and transformed programs are semantically
equivalent, i.e., they compute the same input-output function.
The proofs of semantic equivalence inductively show that a
transformation-specific bisimulation relation holds between the
original and transformed program computations.},
    SEMNO      = {D-499},
    PUF        = {Artikel optaget i tidsskrift},
    }
@Article{ interpreter-spec-jones,
    AUTHOR     = {Jones, N.D.},
    YEAR       = {2004},
    TITLE      = {Transformation by interpreter specialisation},
    JOURNAL    = {Science of Computer Programming},
    volume     = {52},
    pages      = {307--339},
    summary    = {A program may be transformed by specialising an interpreter
     for the language in which it is written. Efficiency of the transformed
     program is determined by the efficiency of the interpreter's dynamic
     operations; the efficiency of its static operations is
irrelevant, since all
     will be ``specialised away''.
     This approach is {\em automatic} (as automatic as the specialiser
     is); {\em general}, in that it applies to all of the
     interpreter's input programs; and
     {\em flexible}, in that a wide range of program transformations are
     achievable since the transformed program inherits the style of the
     interpreter.
     The chief practical challenge is understanding cause and effect:
     How should one write the interpreter so that specialisation produces
     efficient transformed programs? The core of this paper is a series of
     examples, both positive and negative, showing how the way the
     interpreter is written can influence the removal of
     interpretational overhead, and thus the efficiency and size of the
     target programs obtained by specialisation.},
    SEMNO      = {D-500},
    PUF        = {Artikel optaget i tidsskrift},
    }


@MASTERSTHESIS{blum-mscthesis,
  AUTHOR =       {William Blum},
  TITLE =        {Termination Analysis of $\lambda$-calculus and a subset of core ML},
  SCHOOL =       {University of Oxford},
  YEAR =         {2004},
  address =      {http://william.famille-blum.org/},
  month =        {september},
  abstract =     {Lee, Jones and Ben-Amram introduced ``size-change termination'',
        a decidable property strictly stronger than termination. They invented a
        method called the ``size-change principle'' to analyze it. I propose an
        extension of the size-change principle to a subset of ML featuring ground
        type values, higher-order type values and recursively defined functions.
        Compared to other works, this is the first time that the size-change
        principle is applied to a higher-order functional language.

        The language handles natively if-then-else and let rec structures. The resulting algorithm produces the expected
        result for higher-order values but can also analyze the size of ground type values. This enhances the scope of
        the termination analyzer to some recursively defined function operating on numbers.},
  keywords =     {size-change termination, lambda calculus, core ml},
}


@inproceedings{alur-vpa,
 author = {Rajeev Alur and P. Madhusudan},
 title = {Visibly pushdown languages},
 booktitle = {STOC '04: Proceedings of the thirty-sixth annual ACM symposium on Theory of computing},
 year = {2004},
 isbn = {1-58113-852-0},
 pages = {202--211},
 location = {Chicago, IL, USA},
 doi = {http://doi.acm.org/10.1145/1007352.1007390},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }


@inproceedings{podelski-transinvar,
 author = {Andreas Podelski and Andrey Rybalchenko},
 title = {Transition Invariants},
 booktitle = {LICS '04: Proceedings of the 19th Annual IEEE Symposium on Logic in Computer Science (LICS'04)},
 year = {2004},
 isbn = {0-7695-2192-4},
 pages = {32--41},
 doi = {http://dx.doi.org/10.1109/LICS.2004.50},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 }

@inproceedings{podelski-transpredabsrt,
 author = {Andreas Podelski and Andrey Rybalchenko},
 title = {Transition predicate abstraction and fair termination},
 booktitle = {POPL '05: Proceedings of the 32nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
 year = {2005},
 isbn = {1-58113-830-X},
 pages = {132--144},
 location = {Long Beach, California, USA},
 doi = {http://doi.acm.org/10.1145/1040305.1040317},
 publisher = {ACM Press},
 address = {New York, NY, USA},
 }


@article{abel-structuralrecanalysis,
 author = {Andreas Abel and Thorsten Altenkirch},
 title = {A predicative analysis of structural recursion},
 journal = {J. Funct. Program.},
 volume = {12},
 number = {1},
 year = {2002},
 issn = {0956-7968},
 pages = {1--41},
 doi = {http://dx.doi.org/10.1017/S0956796801004191},
 publisher = {Cambridge University Press},
 address = {New York, NY, USA},
 }



 @inproceedings{DBLP:conf/sas/DimovskiGL05,
    author    = {Aleksandar Dimovski and
                Dan R. Ghica and
                Ranko Lazic},
    title     = {Data-Abstraction Refinement: A Game Semantic Approach.},
    booktitle = {SAS},
    year      = {2005},
    pages     = {102-117},
    ee        = {http://dx.doi.org/10.1007/11547662_9},
    crossref  = {DBLP:conf/sas/2005},
    bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/sas/2005,
  editor    = {Chris Hankin and
               Igor Siveroni},
  title     = {Static Analysis, 12th International Symposium, SAS 2005,
               London, UK, September 7-9, 2005, Proceedings},
  booktitle = {SAS},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3672},
  year      = {2005},
  isbn      = {3-540-28584-9},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@InProceedings{CAV02:nusmv,
  author =       {A. Cimatti and E. Clarke and E. Giunchiglia and F. Giunchiglia and M. Pistore and M. Roveri and R. Sebastiani and A. Tacchella},
  title =        {{NuSMV Version 2: An OpenSource Tool for Symbolic Model Checking}},
  booktitle =    {Proc. International Conference on Computer-Aided Verification (CAV 2002)},
  month = {July},
  year =         {2002},
  address =      {Copenhagen, Denmark},
  volume =       {2404},
  series =       {LNCS},
  publisher = {Springer}
}


@inproceedings{ ghicamccusker00,
  author = "Dan R. Ghica and Guy McCusker",
  title = "Reasoning about Idealized {\sc Algol} Using Regular Languages",
  booktitle = "Proceedings of 27th International Colloquium on
                 Automata, Languages and Programming ICALP 2000",
  year = 2000,
  publisher = "Springer-Verlag",
  series = "LNCS",
  volume = "1853",
  pages = "103--116",
  url = "citeseer.ist.psu.edu/ghica00reasoning.html" }


@INPROCEEDINGS{abramsky:mchecking_ia,
  AUTHOR =       {Samson Abramsky},
  TITLE =        {Semantics via game theory},
  BOOKTITLE =    {Marktoberdorf International Summer School},
  YEAR =         {2001},
  note =         {Lecture slides},
}
